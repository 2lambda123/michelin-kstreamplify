/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.github.michelin.kstreamplify.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class MapElement extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -770983058723489109L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MapElement\",\"namespace\":\"io.github.michelin.kstreamplify.avro\",\"fields\":[{\"name\":\"mapDateField\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"mapQuantityField\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":17,\"scale\":4}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<MapElement> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MapElement> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<MapElement> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<MapElement> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<MapElement> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this MapElement to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a MapElement from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a MapElement instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static MapElement fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.time.Instant mapDateField;
  private java.math.BigDecimal mapQuantityField;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MapElement() {}

  /**
   * All-args constructor.
   * @param mapDateField The new value for mapDateField
   * @param mapQuantityField The new value for mapQuantityField
   */
  public MapElement(java.time.Instant mapDateField, java.math.BigDecimal mapQuantityField) {
    this.mapDateField = mapDateField;
    this.mapQuantityField = mapQuantityField;
  }

  @Override
  public SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public Object get(int field$) {
    switch (field$) {
    case 0: return mapDateField;
    case 1: return mapQuantityField;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: mapDateField = (java.time.Instant)value$; break;
    case 1: mapQuantityField = (java.math.BigDecimal)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'mapDateField' field.
   * @return The value of the 'mapDateField' field.
   */
  public java.time.Instant getMapDateField() {
    return mapDateField;
  }


  /**
   * Sets the value of the 'mapDateField' field.
   * @param value the value to set.
   */
  public void setMapDateField(java.time.Instant value) {
    this.mapDateField = value;
  }

  /**
   * Gets the value of the 'mapQuantityField' field.
   * @return The value of the 'mapQuantityField' field.
   */
  public java.math.BigDecimal getMapQuantityField() {
    return mapQuantityField;
  }


  /**
   * Sets the value of the 'mapQuantityField' field.
   * @param value the value to set.
   */
  public void setMapQuantityField(java.math.BigDecimal value) {
    this.mapQuantityField = value;
  }

  /**
   * Creates a new MapElement RecordBuilder.
   * @return A new MapElement RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new MapElement RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MapElement RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new MapElement RecordBuilder by copying an existing MapElement instance.
   * @param other The existing instance to copy.
   * @return A new MapElement RecordBuilder
   */
  public static Builder newBuilder(MapElement other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for MapElement instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MapElement>
    implements org.apache.avro.data.RecordBuilder<MapElement> {

    private java.time.Instant mapDateField;
    private java.math.BigDecimal mapQuantityField;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.mapDateField)) {
        this.mapDateField = data().deepCopy(fields()[0].schema(), other.mapDateField);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.mapQuantityField)) {
        this.mapQuantityField = data().deepCopy(fields()[1].schema(), other.mapQuantityField);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing MapElement instance
     * @param other The existing instance to copy.
     */
    private Builder(MapElement other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.mapDateField)) {
        this.mapDateField = data().deepCopy(fields()[0].schema(), other.mapDateField);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mapQuantityField)) {
        this.mapQuantityField = data().deepCopy(fields()[1].schema(), other.mapQuantityField);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'mapDateField' field.
      * @return The value.
      */
    public java.time.Instant getMapDateField() {
      return mapDateField;
    }


    /**
      * Sets the value of the 'mapDateField' field.
      * @param value The value of 'mapDateField'.
      * @return This builder.
      */
    public Builder setMapDateField(java.time.Instant value) {
      validate(fields()[0], value);
      this.mapDateField = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'mapDateField' field has been set.
      * @return True if the 'mapDateField' field has been set, false otherwise.
      */
    public boolean hasMapDateField() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'mapDateField' field.
      * @return This builder.
      */
    public Builder clearMapDateField() {
      mapDateField = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'mapQuantityField' field.
      * @return The value.
      */
    public java.math.BigDecimal getMapQuantityField() {
      return mapQuantityField;
    }


    /**
      * Sets the value of the 'mapQuantityField' field.
      * @param value The value of 'mapQuantityField'.
      * @return This builder.
      */
    public Builder setMapQuantityField(java.math.BigDecimal value) {
      validate(fields()[1], value);
      this.mapQuantityField = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'mapQuantityField' field has been set.
      * @return True if the 'mapQuantityField' field has been set, false otherwise.
      */
    public boolean hasMapQuantityField() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'mapQuantityField' field.
      * @return This builder.
      */
    public Builder clearMapQuantityField() {
      mapQuantityField = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MapElement build() {
      try {
        MapElement record = new MapElement();
        record.mapDateField = fieldSetFlags()[0] ? this.mapDateField : (java.time.Instant) defaultValue(fields()[0]);
        record.mapQuantityField = fieldSetFlags()[1] ? this.mapQuantityField : (java.math.BigDecimal) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MapElement>
    WRITER$ = (org.apache.avro.io.DatumWriter<MapElement>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MapElement>
    READER$ = (org.apache.avro.io.DatumReader<MapElement>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










