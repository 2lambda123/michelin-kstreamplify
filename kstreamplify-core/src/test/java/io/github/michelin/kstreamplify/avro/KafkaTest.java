/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.github.michelin.kstreamplify.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class KafkaTest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -9160942968827070039L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"KafkaTest\",\"namespace\":\"io.github.michelin.kstreamplify.avro\",\"fields\":[{\"name\":\"stringField\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"booleanField\",\"type\":\"boolean\",\"default\":false},{\"name\":\"quantityField\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":17,\"scale\":4}],\"default\":null},{\"name\":\"dateField\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"members\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"MapElement\",\"fields\":[{\"name\":\"mapDateField\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"mapQuantityField\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":17,\"scale\":4}],\"default\":null}]},\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"membersString\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"listString\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null},{\"name\":\"split\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"SubKafkaTest\",\"fields\":[{\"name\":\"subField\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"subSplit\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"SubSubKafkaTest\",\"fields\":[{\"name\":\"subSubDateField\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"subSubField\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"subSubIntField\",\"type\":[\"null\",\"int\"],\"default\":null}]}},\"default\":[]}]}},\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<KafkaTest> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<KafkaTest> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<KafkaTest> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<KafkaTest> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<KafkaTest> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this KafkaTest to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a KafkaTest from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a KafkaTest instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static KafkaTest fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private String stringField;
  private boolean booleanField;
  private java.math.BigDecimal quantityField;
  private java.time.Instant dateField;
  private java.util.Map<String, MapElement> members;
  private java.util.Map<String, String> membersString;
  private java.util.List<String> listString;
  private java.util.List<SubKafkaTest> split;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public KafkaTest() {}

  /**
   * All-args constructor.
   * @param stringField The new value for stringField
   * @param booleanField The new value for booleanField
   * @param quantityField The new value for quantityField
   * @param dateField The new value for dateField
   * @param members The new value for members
   * @param membersString The new value for membersString
   * @param listString The new value for listString
   * @param split The new value for split
   */
  public KafkaTest(String stringField, Boolean booleanField, java.math.BigDecimal quantityField, java.time.Instant dateField, java.util.Map<String, MapElement> members, java.util.Map<String, String> membersString, java.util.List<String> listString, java.util.List<SubKafkaTest> split) {
    this.stringField = stringField;
    this.booleanField = booleanField;
    this.quantityField = quantityField;
    this.dateField = dateField;
    this.members = members;
    this.membersString = membersString;
    this.listString = listString;
    this.split = split;
  }

  @Override
  public SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public Object get(int field$) {
    switch (field$) {
    case 0: return stringField;
    case 1: return booleanField;
    case 2: return quantityField;
    case 3: return dateField;
    case 4: return members;
    case 5: return membersString;
    case 6: return listString;
    case 7: return split;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: stringField = value$ != null ? value$.toString() : null; break;
    case 1: booleanField = (Boolean)value$; break;
    case 2: quantityField = (java.math.BigDecimal)value$; break;
    case 3: dateField = (java.time.Instant)value$; break;
    case 4: members = (java.util.Map<String, MapElement>)value$; break;
    case 5: membersString = (java.util.Map<String, String>)value$; break;
    case 6: listString = (java.util.List<String>)value$; break;
    case 7: split = (java.util.List<SubKafkaTest>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'stringField' field.
   * @return The value of the 'stringField' field.
   */
  public String getStringField() {
    return stringField;
  }


  /**
   * Sets the value of the 'stringField' field.
   * @param value the value to set.
   */
  public void setStringField(String value) {
    this.stringField = value;
  }

  /**
   * Gets the value of the 'booleanField' field.
   * @return The value of the 'booleanField' field.
   */
  public boolean getBooleanField() {
    return booleanField;
  }


  /**
   * Sets the value of the 'booleanField' field.
   * @param value the value to set.
   */
  public void setBooleanField(boolean value) {
    this.booleanField = value;
  }

  /**
   * Gets the value of the 'quantityField' field.
   * @return The value of the 'quantityField' field.
   */
  public java.math.BigDecimal getQuantityField() {
    return quantityField;
  }


  /**
   * Sets the value of the 'quantityField' field.
   * @param value the value to set.
   */
  public void setQuantityField(java.math.BigDecimal value) {
    this.quantityField = value;
  }

  /**
   * Gets the value of the 'dateField' field.
   * @return The value of the 'dateField' field.
   */
  public java.time.Instant getDateField() {
    return dateField;
  }


  /**
   * Sets the value of the 'dateField' field.
   * @param value the value to set.
   */
  public void setDateField(java.time.Instant value) {
    this.dateField = value;
  }

  /**
   * Gets the value of the 'members' field.
   * @return The value of the 'members' field.
   */
  public java.util.Map<String, MapElement> getMembers() {
    return members;
  }


  /**
   * Sets the value of the 'members' field.
   * @param value the value to set.
   */
  public void setMembers(java.util.Map<String, MapElement> value) {
    this.members = value;
  }

  /**
   * Gets the value of the 'membersString' field.
   * @return The value of the 'membersString' field.
   */
  public java.util.Map<String, String> getMembersString() {
    return membersString;
  }


  /**
   * Sets the value of the 'membersString' field.
   * @param value the value to set.
   */
  public void setMembersString(java.util.Map<String, String> value) {
    this.membersString = value;
  }

  /**
   * Gets the value of the 'listString' field.
   * @return The value of the 'listString' field.
   */
  public java.util.List<String> getListString() {
    return listString;
  }


  /**
   * Sets the value of the 'listString' field.
   * @param value the value to set.
   */
  public void setListString(java.util.List<String> value) {
    this.listString = value;
  }

  /**
   * Gets the value of the 'split' field.
   * @return The value of the 'split' field.
   */
  public java.util.List<SubKafkaTest> getSplit() {
    return split;
  }


  /**
   * Sets the value of the 'split' field.
   * @param value the value to set.
   */
  public void setSplit(java.util.List<SubKafkaTest> value) {
    this.split = value;
  }

  /**
   * Creates a new KafkaTest RecordBuilder.
   * @return A new KafkaTest RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new KafkaTest RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new KafkaTest RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new KafkaTest RecordBuilder by copying an existing KafkaTest instance.
   * @param other The existing instance to copy.
   * @return A new KafkaTest RecordBuilder
   */
  public static Builder newBuilder(KafkaTest other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for KafkaTest instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<KafkaTest>
    implements org.apache.avro.data.RecordBuilder<KafkaTest> {

    private String stringField;
    private boolean booleanField;
    private java.math.BigDecimal quantityField;
    private java.time.Instant dateField;
    private java.util.Map<String, MapElement> members;
    private java.util.Map<String, String> membersString;
    private java.util.List<String> listString;
    private java.util.List<SubKafkaTest> split;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.stringField)) {
        this.stringField = data().deepCopy(fields()[0].schema(), other.stringField);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.booleanField)) {
        this.booleanField = data().deepCopy(fields()[1].schema(), other.booleanField);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.quantityField)) {
        this.quantityField = data().deepCopy(fields()[2].schema(), other.quantityField);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.dateField)) {
        this.dateField = data().deepCopy(fields()[3].schema(), other.dateField);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.members)) {
        this.members = data().deepCopy(fields()[4].schema(), other.members);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.membersString)) {
        this.membersString = data().deepCopy(fields()[5].schema(), other.membersString);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.listString)) {
        this.listString = data().deepCopy(fields()[6].schema(), other.listString);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.split)) {
        this.split = data().deepCopy(fields()[7].schema(), other.split);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing KafkaTest instance
     * @param other The existing instance to copy.
     */
    private Builder(KafkaTest other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.stringField)) {
        this.stringField = data().deepCopy(fields()[0].schema(), other.stringField);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.booleanField)) {
        this.booleanField = data().deepCopy(fields()[1].schema(), other.booleanField);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.quantityField)) {
        this.quantityField = data().deepCopy(fields()[2].schema(), other.quantityField);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.dateField)) {
        this.dateField = data().deepCopy(fields()[3].schema(), other.dateField);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.members)) {
        this.members = data().deepCopy(fields()[4].schema(), other.members);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.membersString)) {
        this.membersString = data().deepCopy(fields()[5].schema(), other.membersString);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.listString)) {
        this.listString = data().deepCopy(fields()[6].schema(), other.listString);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.split)) {
        this.split = data().deepCopy(fields()[7].schema(), other.split);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'stringField' field.
      * @return The value.
      */
    public String getStringField() {
      return stringField;
    }


    /**
      * Sets the value of the 'stringField' field.
      * @param value The value of 'stringField'.
      * @return This builder.
      */
    public Builder setStringField(String value) {
      validate(fields()[0], value);
      this.stringField = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'stringField' field has been set.
      * @return True if the 'stringField' field has been set, false otherwise.
      */
    public boolean hasStringField() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'stringField' field.
      * @return This builder.
      */
    public Builder clearStringField() {
      stringField = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'booleanField' field.
      * @return The value.
      */
    public boolean getBooleanField() {
      return booleanField;
    }


    /**
      * Sets the value of the 'booleanField' field.
      * @param value The value of 'booleanField'.
      * @return This builder.
      */
    public Builder setBooleanField(boolean value) {
      validate(fields()[1], value);
      this.booleanField = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'booleanField' field has been set.
      * @return True if the 'booleanField' field has been set, false otherwise.
      */
    public boolean hasBooleanField() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'booleanField' field.
      * @return This builder.
      */
    public Builder clearBooleanField() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantityField' field.
      * @return The value.
      */
    public java.math.BigDecimal getQuantityField() {
      return quantityField;
    }


    /**
      * Sets the value of the 'quantityField' field.
      * @param value The value of 'quantityField'.
      * @return This builder.
      */
    public Builder setQuantityField(java.math.BigDecimal value) {
      validate(fields()[2], value);
      this.quantityField = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'quantityField' field has been set.
      * @return True if the 'quantityField' field has been set, false otherwise.
      */
    public boolean hasQuantityField() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'quantityField' field.
      * @return This builder.
      */
    public Builder clearQuantityField() {
      quantityField = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'dateField' field.
      * @return The value.
      */
    public java.time.Instant getDateField() {
      return dateField;
    }


    /**
      * Sets the value of the 'dateField' field.
      * @param value The value of 'dateField'.
      * @return This builder.
      */
    public Builder setDateField(java.time.Instant value) {
      validate(fields()[3], value);
      this.dateField = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'dateField' field has been set.
      * @return True if the 'dateField' field has been set, false otherwise.
      */
    public boolean hasDateField() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'dateField' field.
      * @return This builder.
      */
    public Builder clearDateField() {
      dateField = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'members' field.
      * @return The value.
      */
    public java.util.Map<String, MapElement> getMembers() {
      return members;
    }


    /**
      * Sets the value of the 'members' field.
      * @param value The value of 'members'.
      * @return This builder.
      */
    public Builder setMembers(java.util.Map<String, MapElement> value) {
      validate(fields()[4], value);
      this.members = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'members' field has been set.
      * @return True if the 'members' field has been set, false otherwise.
      */
    public boolean hasMembers() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'members' field.
      * @return This builder.
      */
    public Builder clearMembers() {
      members = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'membersString' field.
      * @return The value.
      */
    public java.util.Map<String, String> getMembersString() {
      return membersString;
    }


    /**
      * Sets the value of the 'membersString' field.
      * @param value The value of 'membersString'.
      * @return This builder.
      */
    public Builder setMembersString(java.util.Map<String, String> value) {
      validate(fields()[5], value);
      this.membersString = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'membersString' field has been set.
      * @return True if the 'membersString' field has been set, false otherwise.
      */
    public boolean hasMembersString() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'membersString' field.
      * @return This builder.
      */
    public Builder clearMembersString() {
      membersString = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'listString' field.
      * @return The value.
      */
    public java.util.List<String> getListString() {
      return listString;
    }


    /**
      * Sets the value of the 'listString' field.
      * @param value The value of 'listString'.
      * @return This builder.
      */
    public Builder setListString(java.util.List<String> value) {
      validate(fields()[6], value);
      this.listString = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'listString' field has been set.
      * @return True if the 'listString' field has been set, false otherwise.
      */
    public boolean hasListString() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'listString' field.
      * @return This builder.
      */
    public Builder clearListString() {
      listString = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'split' field.
      * @return The value.
      */
    public java.util.List<SubKafkaTest> getSplit() {
      return split;
    }


    /**
      * Sets the value of the 'split' field.
      * @param value The value of 'split'.
      * @return This builder.
      */
    public Builder setSplit(java.util.List<SubKafkaTest> value) {
      validate(fields()[7], value);
      this.split = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'split' field has been set.
      * @return True if the 'split' field has been set, false otherwise.
      */
    public boolean hasSplit() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'split' field.
      * @return This builder.
      */
    public Builder clearSplit() {
      split = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public KafkaTest build() {
      try {
        KafkaTest record = new KafkaTest();
        record.stringField = fieldSetFlags()[0] ? this.stringField : (String) defaultValue(fields()[0]);
        record.booleanField = fieldSetFlags()[1] ? this.booleanField : (Boolean) defaultValue(fields()[1]);
        record.quantityField = fieldSetFlags()[2] ? this.quantityField : (java.math.BigDecimal) defaultValue(fields()[2]);
        record.dateField = fieldSetFlags()[3] ? this.dateField : (java.time.Instant) defaultValue(fields()[3]);
        record.members = fieldSetFlags()[4] ? this.members : (java.util.Map<String, MapElement>) defaultValue(fields()[4]);
        record.membersString = fieldSetFlags()[5] ? this.membersString : (java.util.Map<String, String>) defaultValue(fields()[5]);
        record.listString = fieldSetFlags()[6] ? this.listString : (java.util.List<String>) defaultValue(fields()[6]);
        record.split = fieldSetFlags()[7] ? this.split : (java.util.List<SubKafkaTest>) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<KafkaTest>
    WRITER$ = (org.apache.avro.io.DatumWriter<KafkaTest>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<KafkaTest>
    READER$ = (org.apache.avro.io.DatumReader<KafkaTest>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










