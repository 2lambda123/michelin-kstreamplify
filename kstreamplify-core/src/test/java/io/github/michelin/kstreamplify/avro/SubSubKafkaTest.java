/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.github.michelin.kstreamplify.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class SubSubKafkaTest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2010635068998981173L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SubSubKafkaTest\",\"namespace\":\"io.github.michelin.kstreamplify.avro\",\"fields\":[{\"name\":\"subSubDateField\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"subSubField\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"subSubIntField\",\"type\":[\"null\",\"int\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<SubSubKafkaTest> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SubSubKafkaTest> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SubSubKafkaTest> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SubSubKafkaTest> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SubSubKafkaTest> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SubSubKafkaTest to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SubSubKafkaTest from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SubSubKafkaTest instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SubSubKafkaTest fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.time.Instant subSubDateField;
  private String subSubField;
  private Integer subSubIntField;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SubSubKafkaTest() {}

  /**
   * All-args constructor.
   * @param subSubDateField The new value for subSubDateField
   * @param subSubField The new value for subSubField
   * @param subSubIntField The new value for subSubIntField
   */
  public SubSubKafkaTest(java.time.Instant subSubDateField, String subSubField, Integer subSubIntField) {
    this.subSubDateField = subSubDateField;
    this.subSubField = subSubField;
    this.subSubIntField = subSubIntField;
  }

  @Override
  public SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public Object get(int field$) {
    switch (field$) {
    case 0: return subSubDateField;
    case 1: return subSubField;
    case 2: return subSubIntField;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: subSubDateField = (java.time.Instant)value$; break;
    case 1: subSubField = value$ != null ? value$.toString() : null; break;
    case 2: subSubIntField = (Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'subSubDateField' field.
   * @return The value of the 'subSubDateField' field.
   */
  public java.time.Instant getSubSubDateField() {
    return subSubDateField;
  }


  /**
   * Sets the value of the 'subSubDateField' field.
   * @param value the value to set.
   */
  public void setSubSubDateField(java.time.Instant value) {
    this.subSubDateField = value;
  }

  /**
   * Gets the value of the 'subSubField' field.
   * @return The value of the 'subSubField' field.
   */
  public String getSubSubField() {
    return subSubField;
  }


  /**
   * Sets the value of the 'subSubField' field.
   * @param value the value to set.
   */
  public void setSubSubField(String value) {
    this.subSubField = value;
  }

  /**
   * Gets the value of the 'subSubIntField' field.
   * @return The value of the 'subSubIntField' field.
   */
  public Integer getSubSubIntField() {
    return subSubIntField;
  }


  /**
   * Sets the value of the 'subSubIntField' field.
   * @param value the value to set.
   */
  public void setSubSubIntField(Integer value) {
    this.subSubIntField = value;
  }

  /**
   * Creates a new SubSubKafkaTest RecordBuilder.
   * @return A new SubSubKafkaTest RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new SubSubKafkaTest RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SubSubKafkaTest RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new SubSubKafkaTest RecordBuilder by copying an existing SubSubKafkaTest instance.
   * @param other The existing instance to copy.
   * @return A new SubSubKafkaTest RecordBuilder
   */
  public static Builder newBuilder(SubSubKafkaTest other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for SubSubKafkaTest instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SubSubKafkaTest>
    implements org.apache.avro.data.RecordBuilder<SubSubKafkaTest> {

    private java.time.Instant subSubDateField;
    private String subSubField;
    private Integer subSubIntField;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.subSubDateField)) {
        this.subSubDateField = data().deepCopy(fields()[0].schema(), other.subSubDateField);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.subSubField)) {
        this.subSubField = data().deepCopy(fields()[1].schema(), other.subSubField);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.subSubIntField)) {
        this.subSubIntField = data().deepCopy(fields()[2].schema(), other.subSubIntField);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing SubSubKafkaTest instance
     * @param other The existing instance to copy.
     */
    private Builder(SubSubKafkaTest other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.subSubDateField)) {
        this.subSubDateField = data().deepCopy(fields()[0].schema(), other.subSubDateField);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.subSubField)) {
        this.subSubField = data().deepCopy(fields()[1].schema(), other.subSubField);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.subSubIntField)) {
        this.subSubIntField = data().deepCopy(fields()[2].schema(), other.subSubIntField);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'subSubDateField' field.
      * @return The value.
      */
    public java.time.Instant getSubSubDateField() {
      return subSubDateField;
    }


    /**
      * Sets the value of the 'subSubDateField' field.
      * @param value The value of 'subSubDateField'.
      * @return This builder.
      */
    public Builder setSubSubDateField(java.time.Instant value) {
      validate(fields()[0], value);
      this.subSubDateField = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'subSubDateField' field has been set.
      * @return True if the 'subSubDateField' field has been set, false otherwise.
      */
    public boolean hasSubSubDateField() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'subSubDateField' field.
      * @return This builder.
      */
    public Builder clearSubSubDateField() {
      subSubDateField = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'subSubField' field.
      * @return The value.
      */
    public String getSubSubField() {
      return subSubField;
    }


    /**
      * Sets the value of the 'subSubField' field.
      * @param value The value of 'subSubField'.
      * @return This builder.
      */
    public Builder setSubSubField(String value) {
      validate(fields()[1], value);
      this.subSubField = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'subSubField' field has been set.
      * @return True if the 'subSubField' field has been set, false otherwise.
      */
    public boolean hasSubSubField() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'subSubField' field.
      * @return This builder.
      */
    public Builder clearSubSubField() {
      subSubField = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'subSubIntField' field.
      * @return The value.
      */
    public Integer getSubSubIntField() {
      return subSubIntField;
    }


    /**
      * Sets the value of the 'subSubIntField' field.
      * @param value The value of 'subSubIntField'.
      * @return This builder.
      */
    public Builder setSubSubIntField(Integer value) {
      validate(fields()[2], value);
      this.subSubIntField = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'subSubIntField' field has been set.
      * @return True if the 'subSubIntField' field has been set, false otherwise.
      */
    public boolean hasSubSubIntField() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'subSubIntField' field.
      * @return This builder.
      */
    public Builder clearSubSubIntField() {
      subSubIntField = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SubSubKafkaTest build() {
      try {
        SubSubKafkaTest record = new SubSubKafkaTest();
        record.subSubDateField = fieldSetFlags()[0] ? this.subSubDateField : (java.time.Instant) defaultValue(fields()[0]);
        record.subSubField = fieldSetFlags()[1] ? this.subSubField : (String) defaultValue(fields()[1]);
        record.subSubIntField = fieldSetFlags()[2] ? this.subSubIntField : (Integer) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SubSubKafkaTest>
    WRITER$ = (org.apache.avro.io.DatumWriter<SubSubKafkaTest>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SubSubKafkaTest>
    READER$ = (org.apache.avro.io.DatumReader<SubSubKafkaTest>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










